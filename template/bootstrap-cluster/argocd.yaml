version: '3'
silent: true

env:
  GITHUB_DEPLOY_KEY_TITLE: "{{ copier__project_name }} ArgoCD GitHub Deploy Key"

tasks:
  generate_github_deploy_key:
    desc: |
      Generate a GitHub deploy key and store it in AWS Parameter Store
    requires:
      vars: [ENV]
    cmds:
      - |
        set -e
        TMP_DIR=$(mktemp -d)
        ssh-keygen -t ed25519 -f $TMP_DIR/id_ed25519 -q -N ""
        aws ssm put-parameter \
          --name "/{{ copier__project_name }}/{{ '{{.ENV}}' }}/argocd/github_deploy_key" \
          --value "file://$TMP_DIR/id_ed25519" \
          --type SecureString --overwrite
        aws ssm put-parameter \
          --name "/{{ copier__project_name }}/{{ '{{.ENV}}' }}/argocd/github_deploy_key.pub" \
          --value "file://$TMP_DIR/id_ed25519.pub" \
          --type String --overwrite
        rm -rf $TMP_DIR

  add_github_deploy_key:
    desc: Add the public key to the GitHub repository as a deploy key
    requires:
      vars: [ENV]
    cmds:
      - |
        set -e
        TMP_DIR=$(mktemp -d)
        aws ssm get-parameter \
          --name "/{{ copier__project_name }}/{{ '{{.ENV}}' }}/argocd/github_deploy_key.pub" \
          --query Parameter.Value --output text > $TMP_DIR/id_ed25519.pub
        gh repo deploy-key add $TMP_DIR/id_ed25519.pub --title "$GITHUB_DEPLOY_KEY_TITLE"
        rm -rf $TMP_DIR

  bootstrap:
    desc: Setup ArgoCD
    cmds:
      - task: install
        vars: {ENV: {{ "'{{.ENV}}'" }}, ARGOCD_VERSION: {{ "'{{.ARGOCD_VERSION}}'" }}}
      - task: generate_github_deploy_key
        vars: {ENV: {{ "'{{.ENV}}'" }}}
      - task: add_github_deploy_key
        vars: {ENV: {{ "'{{.ENV}}'" }}}
      - task: create_repo_credentials_secret
        vars: {ENV: {{ "'{{.ENV}}'" }}}
      - task: bootstrap_root_app
        vars: {ENV: {{ "'{{.ENV}}'" }}}

  install:
    desc: Deploy ArgoCD using Helm
    env:
      KUBECONFIG: "{{ '{{.ENV}}' }}/kubeconfig"
    cmds:
      - helm repo add argocd https://argoproj.github.io/argo-helm
      - helm repo update
      - helm install argocd argo-cd
          --repo https://argoproj.github.io/argo-helm
          --version {{ '{{.ARGOCD_VERSION}}' }}
          --namespace argocd
          --create-namespace
          --set configs.params.server.insecure=true

  create_repo_credentials_secret:
    requires:
      vars: [ENV]
    vars:
      GITHUB_DEPLOY_KEY_B64:
        sh: aws ssm get-parameter --name "/{{ copier__project_name }}/{{ '{{.ENV}}' }}/argocd/github_deploy_key" --with-decryption --query Parameter.Value --output text | base64 -w0
    desc: Create and apply repo credentials secret for each repo
    env:
      KUBECONFIG: "{{ '{{.ENV}}' }}/kubeconfig"
    cmds:
      - |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Secret
        metadata:
          name: {{ '{{printf "%s-repocreds" .REPO_NAME}}' }}
          namespace: argocd
          labels:
            argocd.argoproj.io/secret-type: repository
        data:
          type: {{ '{{"git" | b64enc}}' }}
          url: {{ '{{.REPO_URL | b64enc}}' }}
          sshPrivateKey: {{ '{{.GITHUB_DEPLOY_KEY_B64}}' }}
        EOF

  create_github_webhook_secret:
    requires:
      vars: [ARGOCD_GITHUB_ACCESS_TOKEN, ENV]
    desc: |
      Create GitHub webhook secret and apply

      Usage: ARGOCD_GITHUB_ACCESS_TOKEN="secret token" task argocd:create_github_webhook_secret
    env:
      KUBECONFIG: "{{ '{{.ENV}}' }}/kubeconfig"
    cmds:
      - kubectl -n argocd create secret generic github-token
          --from-literal=token="{{ '{{ARGOCD_GITHUB_ACCESS_TOKEN}}' }}"
          --dry-run=client -o yaml | kubectl apply -f -

  bootstrap_root_app:
    requires:
      vars: [ENV]
    vars:
      BRANCH:
        sh: ([ "$ENV" = "production" ] && echo "main" || echo "develop")
    desc: Bootstrap the Cluster
    env:
      KUBECONFIG: "{{ '{{.ENV}}' }}/kubeconfig"
    cmds:
      - |
        export ENV="{{ '{{.ENV}}' }}" && \
        export BRANCH="{{ '{{.BRANCH}}' }}" && \
        cat root-app.template.yaml | envsubst | kubectl apply -f -
